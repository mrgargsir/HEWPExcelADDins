name: Build & Release HEWP Tools

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Determine Version (Push/Manual)
      - name: Determine Version
        id: get_version
        run: |
          get_highest_version() {
            V1=$1
            V2=$2
            printf "%s\n%s" "$V1" "$V2" | sort -t. -k1,1n -k2,2n -k3,3n | tail -n 1
          }

          FILES=$(find . -type f -name 'MRGARGSIR-Tools-v*.xlsm')
          if [ -z "$FILES" ]; then echo "No versioned .xlsm files found." && exit 1; fi

          HIGHEST_VERSION=""
          BEST_FILE=""
          for file in $FILES; do
            VER=$(echo "$file" | grep -oP 'v\K\d+(\.\d+)?(\.\d+)?')
            if [ -n "$VER" ]; then
              if [ -z "$HIGHEST_VERSION" ]; then
                HIGHEST_VERSION="$VER"
                BEST_FILE="$file"
              else
                CURRENT=$(get_highest_version "$HIGHEST_VERSION" "$VER")
                if [ "$CURRENT" = "$VER" ]; then
                  HIGHEST_VERSION="$VER"
                  BEST_FILE="$file"
                fi
              fi
            fi
          done

          if [ -z "$BEST_FILE" ]; then echo "Could not determine best .xlsm file." && exit 1; fi
          echo "Found version file: $BEST_FILE"

          VERSION_RAW="$HIGHEST_VERSION"
          echo "Version in file: $VERSION_RAW"

          # Get latest release tag via GitHub CLI
          RELEASE_VERSION=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "")
          echo "Latest GitHub Release: $RELEASE_VERSION"

          if [ -z "$RELEASE_VERSION" ]; then
            HIGH_VERSION=$VERSION_RAW
          else
            HIGH_VERSION=$(get_highest_version "$VERSION_RAW" "$RELEASE_VERSION")
          fi

          IFS='.' read -r MAJOR MINOR PATCH <<<"$HIGH_VERSION"
          MAJOR=$(printf "%02d" "$MAJOR")
          MINOR=$(printf "%02d" "$MINOR")
          PATCH=${PATCH:-0}
          PATCH=$(printf "%03d" "$PATCH")

          echo "GitHub Event: $GITHUB_EVENT_NAME"
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || true)

          if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ]; then
            NEW_PATCH=$(printf "%03d" $((10#$PATCH + 1)))
            FINAL_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          elif echo "$CHANGED_FILES" | grep -qF "$BEST_FILE"; then
            FINAL_VERSION="${MAJOR}.${MINOR}"
          elif echo "$CHANGED_FILES" | grep -qE '^OtherFiles/|.*'; then
            NEW_MINOR=$(printf "%02d" $((10#$MINOR + 1)))
            FINAL_VERSION="${MAJOR}.${NEW_MINOR}"
          else
            FINAL_VERSION="${MAJOR}.${MINOR}"
          fi

          echo "VERSION=$FINAL_VERSION" >> $GITHUB_ENV
          echo "VERSION_SHORT=$FINAL_VERSION" >> $GITHUB_ENV
          echo "BEST_FILE=$BEST_FILE" >> $GITHUB_ENV

      # Rename the .xlsm file with new version
      - name: Rename .xlsm file to match new version
        run: |
          NEW_FILE="MRGARGSIR-Tools-v${VERSION}.xlsm"
          mv "$BEST_FILE" "$NEW_FILE"
          echo "Renamed $BEST_FILE -> $NEW_FILE"

      - name: Download .zip from mrgargsir/HEWPContractorextension
        id: download_external_zip
        uses: robinraju/release-downloader@v1.10
        with:
          repository: mrgargsir/HEWPContractorextension
          latest: true
          fileName: "*.zip"
          extract: false
          out-file-path: ./

      - name: Place external ZIP into OtherFiles/
        run: |
          mkdir -p OtherFiles
          cp ${{ fromJson(steps.download_external_zip.outputs.downloaded_files)[0] }} OtherFiles/

      - name: Create Combined ZIP
        run: |
          ZIP_NAME="HEWPTools_UtilityByMRGARGSIR_${VERSION_SHORT}.zip"
          # Zip entire repo except GitHub workflows folder
          zip -r "$ZIP_NAME" . -x ".github/workflows/*"
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: Get Commit Message for Release Notes
        id: changelog
        run: |
          DESC=$(git log -1 --pretty=%B)
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo "$DESC" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: "HEWP Tools ${{ env.VERSION }}"
          body: ${{ env.RELEASE_BODY }}
          files: ${{ env.ZIP_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: hewp-tools-${{ env.VERSION_SHORT }}
          path: ${{ env.ZIP_NAME }}
