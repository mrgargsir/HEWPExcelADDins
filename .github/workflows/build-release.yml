name: Build & Release HEWP Tools

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout your repo
      - uses: actions/checkout@v4

      # 2. Determine Version (smart bump logic)
      - name: Determine Version
        id: get_version
        run: |
          FILE=$(find . -type f -name 'MRGARGSIR-Tools-v*.xlsm' | head -n 1)
          if [ -z "$FILE" ]; then
            echo "‚ùå No version file found."
            exit 1
          fi
          echo "Found version file: $FILE"
          VERSION_RAW=$(echo "$FILE" | grep -oP 'v\K\d+(\.\d+)?(\.\d+)?')
          IFS='.' read -r MAJOR MINOR PATCH <<<"${VERSION_RAW}"
          if [ -z "$PATCH" ]; then PATCH=0; fi
          echo "GitHub Event: $GITHUB_EVENT_NAME"

          if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ]; then
            NEW_PATCH=$(echo "$PATCH + 0.0001" | bc -l)
            NEW_PATCH_FORMATTED=$(printf "%.6f" "$NEW_PATCH" | sed 's/^0*//')
            FINAL_VERSION="${MAJOR}.${MINOR}${NEW_PATCH_FORMATTED}"
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || true)
            if echo "$CHANGED_FILES" | grep -qF "$FILE"; then
              FINAL_VERSION=$VERSION_RAW
            elif echo "$CHANGED_FILES" | grep -qE '^OtherFiles/|.*'; then
              NEW_PATCH=$(echo "$PATCH + 0.01" | bc -l)
              NEW_PATCH_FORMATTED=$(printf "%.2f" "$NEW_PATCH" | sed 's/^0*//')
              FINAL_VERSION="${MAJOR}.${MINOR}${NEW_PATCH_FORMATTED}"
            else
              FINAL_VERSION=$VERSION_RAW
            fi
          fi

          echo "VERSION=$FINAL_VERSION" >> $GITHUB_ENV
          echo "VERSION_SHORT=$FINAL_VERSION" >> $GITHUB_ENV

      # 2.1 Rename .xlsm file to match new version
      - name: Rename .xlsm file to match new version
        run: |
          OLD_FILE=$(find . -type f -name 'MRGARGSIR-Tools-v*.xlsm' | head -n 1)
          NEW_FILE="MRGARGSIR-Tools-v${VERSION}.xlsm"
          mv "$OLD_FILE" "$NEW_FILE"
          echo "Renamed $OLD_FILE -> $NEW_FILE"

      # 3. Download external ZIP (no extract)
      - name: Download .zip from mrgargsir/HEWPContractorextension
        id: download_external_zip
        uses: robinraju/release-downloader@v1.10
        with:
          repository: mrgargsir/HEWPContractorextension
          latest: true
          fileName: "*.zip"
          extract: false
          out-file-path: ./

      # 4. Place external ZIP into OtherFiles/
      - name: Place external ZIP into OtherFiles/
        run: |
          mkdir -p OtherFiles
          cp ${{ fromJson(steps.download_external_zip.outputs.downloaded_files)[0] }} OtherFiles/

      # 5. Create combined ZIP file with versioned name
      - name: Create Combined ZIP
        run: |
          ZIP_NAME="HEWPTools&UtilityByMRGARGSIR_${VERSION_SHORT}.zip"
          zip -r "$ZIP_NAME" OtherFiles "MRGARGSIR-Tools-v${VERSION}.xlsm"
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      # 6. Get latest commit message for release notes
      - name: Get Commit Message for Release Notes
        id: changelog
        run: |
          DESC=$(git log -1 --pretty=%B)
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo "$DESC" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 7. Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: "HEWP Tools ${{ env.VERSION }}"
          body: ${{ env.RELEASE_BODY }}
          files: ${{ env.ZIP_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 8. Upload ZIP artifact (optional)
      - name: Upload ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: hewp-tools-${{ env.VERSION_SHORT }}
          path: ${{ env.ZIP_NAME }}
