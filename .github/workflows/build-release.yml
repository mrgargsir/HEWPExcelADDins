name: Build & Release HEWP Tools

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout your repo
      - uses: actions/checkout@v4

      # 2. Determine Version (smart bump logic)
- name: Determine Version
  id: get_version
  run: |
    # Find the .xlsm version file
    FILE=$(find . -type f -name 'MRGARGSIR-Tools-v*.xlsm' | head -n 1)
    if [ -z "$FILE" ]; then
      echo "❌ No version file found. Make sure a file named like MRGARGSIR-Tools-v*.xlsm exists."
      exit 1
    fi
    echo "Found version file: $FILE"

    # Extract base version from filename, allowing 1 or 2 decimals (e.g. v1.2 or v1.2.3)
    VERSION_RAW=$(echo "$FILE" | grep -oP 'v\K\d+(\.\d+)?(\.\d+)?')
    echo "Base version: $VERSION_RAW"

    # Parse version parts (major.minor.patch)
    IFS='.' read -r MAJOR MINOR PATCH <<<"${VERSION_RAW}"

    # Default patch to 0 if empty
    if [ -z "$PATCH" ]; then
      PATCH=0
    fi

    echo "GitHub Event Name: $GITHUB_EVENT_NAME"

    if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ]; then
      # Manual run: add 0.0001 to patch
      NEW_PATCH=$(echo "$PATCH + 0.0001" | bc -l)
      NEW_PATCH_FORMATTED=$(printf "%.6f" "$NEW_PATCH" | sed 's/^0*//')
      FINAL_VERSION="${MAJOR}.${MINOR}${NEW_PATCH_FORMATTED}"
      echo "Manual run: bump patch by 0.0001 to $NEW_PATCH_FORMATTED"
    else
      # Push event: check if .xlsm version file was modified
      CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || true)
      echo "Changed files in last commit:"
      echo "$CHANGED_FILES"

      if echo "$CHANGED_FILES" | grep -qF "$FILE"; then
        echo "✅ .xlsm version file was modified, use base version $VERSION_RAW"
        FINAL_VERSION=$VERSION_RAW
      elif echo "$CHANGED_FILES" | grep -qE '^OtherFiles/|.*'; then
        # bump patch by 0.01
        NEW_PATCH=$(echo "$PATCH + 0.01" | bc -l)
        NEW_PATCH_FORMATTED=$(printf "%.2f" "$NEW_PATCH" | sed 's/^0*//')
        FINAL_VERSION="${MAJOR}.${MINOR}${NEW_PATCH_FORMATTED}"
        echo "bump patch by 0.01 to $NEW_PATCH_FORMATTED"
      else
        # No relevant changes, keep base version
        FINAL_VERSION=$VERSION_RAW
        echo "No relevant changes detected, keeping base version $FINAL_VERSION"
      fi
    fi

    echo "Computed final version: $FINAL_VERSION"
    echo "VERSION=$FINAL_VERSION" >> $GITHUB_ENV


      # 3. Download latest release ZIP from external repo (no extract)
      - name: Download .zip from mrgargsir/HEWPContractorextension (No extract)
        id: download_external_zip
        uses: robinraju/release-downloader@v1.10
        with:
          repository: mrgargsir/HEWPContractorextension
          latest: true
          fileName: "*.zip"
          extract: false
          out-file-path: ./

      # 4. Place external ZIP into OtherFiles/ keeping original name
      - name: Place external ZIP into OtherFiles/
        run: |
          mkdir -p OtherFiles
          cp ${{ fromJson(steps.download_external_zip.outputs.downloaded_files)[0] }} OtherFiles/


      # 5. Create combined ZIP file with versioned name
      - name: Create Combined ZIP
        run: |
          ZIP_NAME="HEWPTools&UtilityByMRGARGSIR_${VERSION_SHORT}.zip"
          zip -r "$ZIP_NAME" OtherFiles $(find . -type f -name 'MRGARGSIR-Tools-v*.xlsm')
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      # 6. Get latest commit message for release notes
      - name: Get Commit Message for Release Notes
        id: changelog
        run: |
          DESC=$(git log -1 --pretty=%B)
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo "$DESC" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 7. Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: "HEWP Tools ${{ env.VERSION }}"
          body: ${{ env.RELEASE_BODY }}
          files: ${{ env.ZIP_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 8. Upload ZIP artifact (optional)
      - name: Upload ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: hewp-tools-${{ env.VERSION_SHORT }}
          path: ${{ env.ZIP_NAME }}
