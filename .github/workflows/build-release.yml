name: Build & Release HEWP Tools

on:
  push:
    branches: [main]
    paths-ignore:
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Fetch full Git history (fix for HEAD^ error)
      - name: Fetch full Git history
        run: git fetch --unshallow || true

      # Determine Version (Push/Manual)
      - name: Determine Version
        id: get_version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Function to compare versions and return highest
          get_highest_version() {
            V1=$1
            V2=$2
            printf "%s\n%s" "$V1" "$V2" | sort -t. -k1,1n -k2,2n -k3,3n | tail -n 1
          }

          # Find all MRGARGSIR Tools files with versions in name
          FILES=$(find . -type f -name 'MRGARGSIR-Tools-v*.xlsm')
          if [ -z "$FILES" ]; then echo "No versioned .xlsm files found." && exit 1; fi

          HIGHEST_VERSION=""
          BEST_FILE=""
          for file in $FILES; do
            # Extract version from filename, e.g. v2.12
            VER=$(echo "$file" | grep -oP 'v\K\d+\.\d+')
            if [ -n "$VER" ]; then
              if [ -z "$HIGHEST_VERSION" ]; then
                HIGHEST_VERSION="$VER"
                BEST_FILE="$file"
              else
                CURRENT=$(get_highest_version "$HIGHEST_VERSION" "$VER")
                if [ "$CURRENT" = "$VER" ]; then
                  HIGHEST_VERSION="$VER"
                  BEST_FILE="$file"
                fi
              fi
            fi
          done

          echo "Found highest version file: $BEST_FILE"
          echo "Version from filename: $HIGHEST_VERSION"

          # Get latest release tag (e.g. 02.12.003) from GitHub releases via CLI
          RELEASE_VERSION=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "")
          echo "Latest GitHub Release: $RELEASE_VERSION"

          # Pick the highest version between filename and last release tag
          if [ -z "$RELEASE_VERSION" ]; then
            HIGH_VERSION="$HIGHEST_VERSION.000"
          else
            HIGH_VERSION=$(get_highest_version "$HIGHEST_VERSION.000" "$RELEASE_VERSION")
          fi

          # Split version parts, pad numbers
          IFS='.' read -r MAJOR MINOR PATCH <<< "$HIGH_VERSION"
          MAJOR=$(printf "%02d" "$MAJOR")
          MINOR=$(printf "%02d" "$MINOR")
          PATCH=$(printf "%03d" "${PATCH:-0}")

          echo "GitHub Event: $GITHUB_EVENT_NAME"
          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.sha }}"

          # If BEFORE commit invalid (like first commit), fallback to root commit
          if [ -z "$BEFORE" ] || ! git cat-file -e "$BEFORE^{commit}" 2>/dev/null; then
            BEFORE=$(git rev-list --max-parents=0 HEAD | tail -n1)
          fi

          # Get changed files between commits
          CHANGED_FILES=$(git diff --name-only "$BEFORE" "$AFTER" || true)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Check conditions:
          # 1. Manual workflow dispatch → patch bump
          # 2. If changed file includes BEST_FILE → use version from filename (patch=000)
          # 3. If changed files outside .github → minor bump, patch=000
          # 4. If only .github changed → patch bump
          if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ]; then
            PATCH=$(printf "%03d" $((10#$PATCH + 10)))
            FINAL_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          elif echo "$CHANGED_FILES" | grep -qF "$BEST_FILE"; then
            # Use version from filename with patch = 000
            PATCH="000"
            FINAL_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          elif echo "$CHANGED_FILES" | grep -v '^.github/' | grep -q '.'; then
            # Some file other than .github changed → minor bump and reset patch
            PATCH=$(printf "%03d" $((10#$PATCH + 100)))
            FINAL_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          else
            # Only .github changed → patch bump
            PATCH=$(printf "%03d" $((10#$PATCH + 1)))
            FINAL_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi

          echo "Determined version: $FINAL_VERSION"

          # Export environment variables for other steps
          echo "VERSION=$FINAL_VERSION" >> $GITHUB_ENV
          echo "VERSION_SHORT=${MAJOR}.${MINOR}" >> $GITHUB_ENV
          echo "BEST_FILE=$BEST_FILE" >> $GITHUB_ENV
    

      - name: Download .zip from mrgargsir/HEWPContractorextension
        id: download_external_zip
        uses: robinraju/release-downloader@v1.10
        with:
          repository: mrgargsir/HEWPContractorextension
          latest: true
          fileName: "*.zip"
          extract: false
          out-file-path: ./OtherFiles/  # Download directly to target directory

      - name: Verify download
        run: |
          ls -la OtherFiles/
              # Optional verification step to ensure file was downloaded

      - name: Create Combined ZIP
        run: |
          ZIP_NAME="HEWPTools_UtilityByMRGARGSIR_${VERSION_SHORT}.zip"
          # Zip entire repo except GitHub workflows folder
          zip -r "$ZIP_NAME" . -x ".github/workflows/*" -x ".git/*" -x ".github/*"

          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: Get Commit Message for Release Notes
        id: changelog
        run: |
          DESC=$(git log -1 --pretty=%B)
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo "$DESC" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: "HEWP Tools ${{ env.VERSION }}"
          body: ${{ env.RELEASE_BODY }}
          files: ${{ env.ZIP_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: hewp-tools-${{ env.VERSION_SHORT }}
          path: ${{ env.ZIP_NAME }}
     
